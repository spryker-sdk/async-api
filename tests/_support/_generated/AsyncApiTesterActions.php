<?php  //[STAMP] dab0b8cfdef5da27374e8280084daece
namespace SprykerSdkTest\AsyncApi\_generated;

// This class was automatically generated by build task
// You should not change it manually as it will be overwritten on next build
// @codingStandardsIgnoreFile

trait AsyncApiTesterActions
{
    /**
     * @return \Codeception\Scenario
     */
    abstract protected function getScenario();

    
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @return \SprykerSdk\AsyncApi\AsyncApiFacadeInterface
     * @see \SprykerSdkTest\Helper\AsyncApiHelper::getFacade()
     */
    public function getFacade(): \SprykerSdk\AsyncApi\AsyncApiFacadeInterface {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getFacade', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @return \SprykerSdk\AsyncApi\AsyncApiConfig
     * @see \SprykerSdkTest\Helper\AsyncApiHelper::getConfig()
     */
    public function getConfig(): \SprykerSdk\AsyncApi\AsyncApiConfig {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getConfig', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @return string
     * @see \SprykerSdkTest\Helper\AsyncApiHelper::getRootPath()
     */
    public function getRootPath(): string {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getRootPath', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * This will ensure that the AopSdkConfig::getProjectRootPath() will return the passed path.
     *
     * @param string $rootPath
     *
     * @return void
     * @see \SprykerSdkTest\Helper\AsyncApiHelper::mockRoot()
     */
    public function mockRoot(string $rootPath): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('mockRoot', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Sets up an expected directory structure in the virtual filesystem
     *
     * @param array $structure
     *
     * @return void
     * @see \SprykerSdkTest\Helper\AsyncApiHelper::mockDirectoryStructure()
     */
    public function mockDirectoryStructure(array $structure): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('mockDirectoryStructure', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @return \Generated\Shared\Transfer\AsyncApiRequestTransfer
     * @see \SprykerSdkTest\Helper\AsyncApiHelper::haveAsyncApiAddRequest()
     */
    public function haveAsyncApiAddRequest(): \Generated\Shared\Transfer\AsyncApiRequestTransfer {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('haveAsyncApiAddRequest', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * We assume that an AsyncApi file with version 0.1.0 exists when `\SprykerSdkTest\Helper\AsyncApiHelper::haveAsyncApiFile()`
     * was called before `\SprykerSdk\Zed\AopSdk\Business\AopSdkFacadeInterface::addAsyncApi()` is executed.
     *
     * @return \Generated\Shared\Transfer\AsyncApiRequestTransfer
     * @see \SprykerSdkTest\Helper\AsyncApiHelper::haveAsyncApiUpdateVersionRequest()
     */
    public function haveAsyncApiUpdateVersionRequest(): \Generated\Shared\Transfer\AsyncApiRequestTransfer {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('haveAsyncApiUpdateVersionRequest', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @return \Generated\Shared\Transfer\AsyncApiRequestTransfer
     * @see \SprykerSdkTest\Helper\AsyncApiHelper::haveAsyncApiAddRequestWithExistingAsyncApi()
     */
    public function haveAsyncApiAddRequestWithExistingAsyncApi(): \Generated\Shared\Transfer\AsyncApiRequestTransfer {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('haveAsyncApiAddRequestWithExistingAsyncApi', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @return \Generated\Shared\Transfer\AsyncApiRequestTransfer
     * @see \SprykerSdkTest\Helper\AsyncApiHelper::haveAsyncApiAddRequestWithExistingAsyncApiAndPayloadTransferObject()
     */
    public function haveAsyncApiAddRequestWithExistingAsyncApiAndPayloadTransferObject(): \Generated\Shared\Transfer\AsyncApiRequestTransfer {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('haveAsyncApiAddRequestWithExistingAsyncApiAndPayloadTransferObject', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * This simulates a CLI command execution where properties are set in the AsyncApiRequestTransfer.
     *
     * @param array|null $properties
     *
     * @return \Generated\Shared\Transfer\AsyncApiRequestTransfer
     * @see \SprykerSdkTest\Helper\AsyncApiHelper::haveAsyncApiAddRequestWithExistingAsyncApiAndProperties()
     */
    public function haveAsyncApiAddRequestWithExistingAsyncApiAndProperties(?array $properties = NULL): \Generated\Shared\Transfer\AsyncApiRequestTransfer {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('haveAsyncApiAddRequestWithExistingAsyncApiAndProperties', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * return void
     *
     * @return void
     * @see \SprykerSdkTest\Helper\AsyncApiHelper::haveAsyncApiFile()
     */
    public function haveAsyncApiFile(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('haveAsyncApiFile', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param \Generated\Shared\Transfer\AsyncApiResponseTransfer $asyncApiResponseTransfer
     *
     * @return array
     * @see \SprykerSdkTest\Helper\AsyncApiHelper::getMessagesFromAsyncApiResponseTransfer()
     */
    public function getMessagesFromAsyncApiResponseTransfer(\Generated\Shared\Transfer\AsyncApiResponseTransfer $asyncApiResponseTransfer): array {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getMessagesFromAsyncApiResponseTransfer', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $targetFile
     * @param string $messageName
     * @param string $channelName
     *
     * @return void
     * @see \SprykerSdkTest\Helper\AsyncApiHelper::assertAsyncApiHasPublishMessageInChannel()
     */
    public function assertAsyncApiHasPublishMessageInChannel(string $targetFile, string $messageName, string $channelName): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertAsyncApiHasPublishMessageInChannel', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $targetFile
     * @param string $messageName
     * @param string $channelName
     *
     * @return void
     * @see \SprykerSdkTest\Helper\AsyncApiHelper::assertAsyncApiHasSubscribeMessageInChannel()
     */
    public function assertAsyncApiHasSubscribeMessageInChannel(string $targetFile, string $messageName, string $channelName): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertAsyncApiHasSubscribeMessageInChannel', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $targetFile
     * @param string $expectedVersion
     *
     * @return void
     * @see \SprykerSdkTest\Helper\AsyncApiHelper::assertAsyncApiVersionIsUpdated()
     */
    public function assertAsyncApiVersionIsUpdated(string $targetFile, string $expectedVersion): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertAsyncApiVersionIsUpdated', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param \Generated\Shared\Transfer\AsyncApiResponseTransfer $asyncApiResponseTransfer
     *
     * @return void
     * @see \SprykerSdkTest\Helper\AsyncApiHelper::assertAsyncApiResponseHasNoErrors()
     */
    public function assertAsyncApiResponseHasNoErrors(\Generated\Shared\Transfer\AsyncApiResponseTransfer $asyncApiResponseTransfer): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertAsyncApiResponseHasNoErrors', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string|null $messageName When $messageName is passed the message will not have a PayloadTransferObjectName.
     *
     * @return \Generated\Shared\Transfer\AsyncApiMessageTransfer
     * @see \SprykerSdkTest\Helper\AsyncApiHelper::havePublishMessageWithMetadata()
     */
    public function havePublishMessageWithMetadata(?string $messageName = NULL): \Generated\Shared\Transfer\AsyncApiMessageTransfer {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('havePublishMessageWithMetadata', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string|null $messageName When $messageName is passed the message will not have a PayloadTransferObjectName.
     *
     * @return \Generated\Shared\Transfer\AsyncApiMessageTransfer
     * @see \SprykerSdkTest\Helper\AsyncApiHelper::haveSubscribeMessageWithMetadata()
     */
    public function haveSubscribeMessageWithMetadata(?string $messageName = NULL): \Generated\Shared\Transfer\AsyncApiMessageTransfer {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('haveSubscribeMessageWithMetadata', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @return \SprykerSdk\AsyncApi\Console\BuildCodeFromAsyncApiConsole
     * @see \SprykerSdkTest\Helper\AsyncApiHelper::getAsyncApiBuilderConsoleMock()
     */
    public function getAsyncApiBuilderConsoleMock(): \SprykerSdk\AsyncApi\Console\BuildCodeFromAsyncApiConsole {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getAsyncApiBuilderConsoleMock', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $targetFile
     * @param string $channelName
     * @param string $channelType
     * @param string $messageName
     * @param array $property
     *
     * @return void
     * @see \SprykerSdkTest\Helper\AsyncApiHelper::assertMessageInChannelHasProperty()
     */
    public function assertMessageInChannelHasProperty(string $targetFile, string $channelName, string $channelType, string $messageName, array $property): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertMessageInChannelHasProperty', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $targetFile
     * @param string $channelName
     * @param string $channelType
     * @param string $messageName
     *
     * @return void
     * @see \SprykerSdkTest\Helper\AsyncApiHelper::assertMessageInChannelHasOperationId()
     */
    public function assertMessageInChannelHasOperationId(string $targetFile, string $channelName, string $channelType, string $messageName): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('assertMessageInChannelHasOperationId', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @return void
     * @see \SprykerSdkTest\Helper\AsyncApiValidatorHelper::haveValidAsyncApiFile()
     */
    public function haveValidAsyncApiFile(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('haveValidAsyncApiFile', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @return void
     * @see \SprykerSdkTest\Helper\AsyncApiValidatorHelper::haveAsyncApiFileWithNoMessages()
     */
    public function haveAsyncApiFileWithNoMessages(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('haveAsyncApiFileWithNoMessages', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @return void
     * @see \SprykerSdkTest\Helper\AsyncApiValidatorHelper::haveAsyncApiFileSyntaxError()
     */
    public function haveAsyncApiFileSyntaxError(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('haveAsyncApiFileSyntaxError', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @return void
     * @see \SprykerSdkTest\Helper\AsyncApiValidatorHelper::haveAsyncApiFileWithMissingRequiredFields()
     */
    public function haveAsyncApiFileWithMissingRequiredFields(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('haveAsyncApiFileWithMissingRequiredFields', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @return void
     * @see \SprykerSdkTest\Helper\AsyncApiValidatorHelper::haveAsyncApiFileWithDuplicatedMessageNames()
     */
    public function haveAsyncApiFileWithDuplicatedMessageNames(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('haveAsyncApiFileWithDuplicatedMessageNames', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @return void
     * @see \SprykerSdkTest\Helper\ValidatorHelper::haveValidConfigurations()
     */
    public function haveValidConfigurations(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('haveValidConfigurations', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @return \Generated\Shared\Transfer\ValidateRequestTransfer
     * @see \SprykerSdkTest\Helper\ValidatorHelper::haveValidateRequest()
     */
    public function haveValidateRequest(): \Generated\Shared\Transfer\ValidateRequestTransfer {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('haveValidateRequest', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param \Generated\Shared\Transfer\ValidateResponseTransfer $validateResponseTransfer
     *
     * @return array
     * @see \SprykerSdkTest\Helper\ValidatorHelper::getMessagesFromValidateResponseTransfer()
     */
    public function getMessagesFromValidateResponseTransfer(\Generated\Shared\Transfer\ValidateResponseTransfer $validateResponseTransfer): array {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getMessagesFromValidateResponseTransfer', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param \SprykerSdk\Zed\AopSdk\Communication\Console\AbstractConsole|string $command
     *
     * @return \Symfony\Component\Console\Tester\CommandTester
     * @see \SprykerSdkTest\Helper\CommandHelper::getConsoleTester()
     */
    public function getConsoleTester($command): \Symfony\Component\Console\Tester\CommandTester {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getConsoleTester', func_get_args()));
    }
}
